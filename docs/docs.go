// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/book": {
            "get": {
                "description": "Endpoint used to get list of available books",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Book"
                ],
                "summary": "Get list books",
                "parameters": [
                    {
                        "type": "string",
                        "description": "limit per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-model_ListBooksRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-string"
                        }
                    }
                }
            }
        },
        "/order": {
            "post": {
                "description": "Endpoint used to create order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Create order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "X-User-ID",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateOrderReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-model_CreateOrderRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-string"
                        }
                    }
                }
            }
        },
        "/order/history": {
            "get": {
                "description": "Endpoint used to get order history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get order history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "X-User-ID",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "limit per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start timestamp, format: 2006-01-01T00:00:00Z",
                        "name": "startTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end timestamp, format: 2006-01-01T00:00:00Z",
                        "name": "endTime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-model_GetOrderHistoryRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-string"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Endpoint used to create new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-model_UserCreateRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/respond.APIModel-string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Book": {
            "type": "object",
            "properties": {
                "authors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "model.CreateOrderItemReq": {
            "type": "object",
            "properties": {
                "book_id": {
                    "type": "string"
                },
                "qty": {
                    "type": "integer"
                }
            }
        },
        "model.CreateOrderReq": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CreateOrderItemReq"
                    }
                },
                "shippingAddress": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "model.CreateOrderRes": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "model.GetOrderHistoryRes": {
            "type": "object",
            "properties": {
                "order_details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.OrderDetails"
                    }
                }
            }
        },
        "model.ListBooksRes": {
            "type": "object",
            "properties": {
                "books": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Book"
                    }
                }
            }
        },
        "model.OrderDetails": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.OrderItemDetails"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.OrderItemDetails": {
            "type": "object",
            "properties": {
                "book_id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "qty": {
                    "type": "integer"
                }
            }
        },
        "model.UserCreateReq": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pass": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "zip_code": {
                    "type": "string"
                }
            }
        },
        "model.UserCreateRes": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "respond.APIModel-model_CreateOrderRes": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.CreateOrderRes"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/respond.ErrorAPIModel"
                    }
                }
            }
        },
        "respond.APIModel-model_GetOrderHistoryRes": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.GetOrderHistoryRes"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/respond.ErrorAPIModel"
                    }
                }
            }
        },
        "respond.APIModel-model_ListBooksRes": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.ListBooksRes"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/respond.ErrorAPIModel"
                    }
                }
            }
        },
        "respond.APIModel-model_UserCreateRes": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.UserCreateRes"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/respond.ErrorAPIModel"
                    }
                }
            }
        },
        "respond.APIModel-string": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/respond.ErrorAPIModel"
                    }
                }
            }
        },
        "respond.ErrorAPIModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reqId": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost:9001",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Bookstore API",
	Description:      "Bookstore API Service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
