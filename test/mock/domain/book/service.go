// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package book_mock is a generated GoMock package.
package book_mock

import (
	pagination "bookstore/common/pagination"
	model "bookstore/domain/book/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetBookDetailsMap mocks base method.
func (m *MockService) GetBookDetailsMap(ctx context.Context, req model.GetBookDetailsReq) (model.BookDetailsMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookDetailsMap", ctx, req)
	ret0, _ := ret[0].(model.BookDetailsMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookDetailsMap indicates an expected call of GetBookDetailsMap.
func (mr *MockServiceMockRecorder) GetBookDetailsMap(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookDetailsMap", reflect.TypeOf((*MockService)(nil).GetBookDetailsMap), ctx, req)
}

// ListBooks mocks base method.
func (m *MockService) ListBooks(ctx context.Context, pagination pagination.Pagination) (model.ListBooksRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", ctx, pagination)
	ret0, _ := ret[0].(model.ListBooksRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockServiceMockRecorder) ListBooks(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockService)(nil).ListBooks), ctx, pagination)
}
